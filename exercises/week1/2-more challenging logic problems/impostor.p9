% Saved by Prover9-Mace4 Version 0.5B, March 2008 (Dec 2007 LADR).

set(ignore_option_dependencies). % GUI handles dependencies

if(Prover9). % Options for Prover9
  clear(auto).
  clear(auto_setup).
  clear(auto_limits).
  clear(auto_denials).
  clear(auto_inference).
  clear(auto_process).
  assign(eq_defs, pass).
  assign(max_seconds, 10).
  assign(max_weight, 2147483647).
  clear(predicate_elim).
  set(binary_resolution).
  set(paramodulation).
  set(factor).
end_if.

if(Mace4).   % Options for Mace4
  assign(max_seconds, 60).
end_if.

if(Prover9). % Additional input for Prover9
assign(sos_limit, -1).
% Last line is a lie. It is there to stop the Prover9-Mace4
% GUI giving a warning when the file is loaded.
% This file was actually reated by BB Prover9 Autograder
end_if.

formulas(assumptions).

%% Impostors on a ship
%% A logic problem by Adam Richard-Bollans
%%
%% Prover9 file: impostor.p9

%% To solve this first-order logic proof problem, you must replace
%% each of the assumption place-holders __An__ and the goal place-holder
%% __G__, with an approapriate first-order formula that captures the
%% meaning of the given English sentence.
%% 
%% Then run Prover9. 
%% If your representations are correct, it should find a Proof.
%% You can also check your representations using the Gradescope Autograder.

%% In writing the formulae, you should only use the following vocabulary:
%%
%% Logical symbols:           &  |  -  ->   <->  =  all  exists
%% Brackets and separators:   ( )  [  ]  ,  .
%% Variables:                 Whatever you like, but must be quantified.
%%
%% Constants: Blue, Red, Yellow, Purple, Janitor
%% Predicates: Crewmember, Impostor, Murdered
%% Relations: Accused, KnowsImpostor
%%
%% Use only the specified vocabulary, otherwise the autograder will not work.

%% A1: "Blue,Red,Yellow, Purple and a Janitor are crewmembers on a ship and are the only crewmembers."
% ===> 1
% 1      Crewmember(Blue) & Crewmember(Red) & Crewmember(Yellow) & Crewmember(Purple) & Crewmember(Janitor)
%       Crewmember(Blue) & Crewmember(Red) & Crewmember(Yellow) & Crewmember(Purple) & Crewmember(Janitor).
% 0     all x (Crewmember(x) -> Blue=x | Red=x | Yellow=x | Purple=x | Janitor).
% 1     Crewmember(Blue) & Crewmember(Red) & Crewmember(Yellow) & Crewmember(Purple) & Crewmember(Janitor). % & -exists x (Crewmember(x) & -(x=Blue | x=Red | x=Yellow | x=Purple | x= Janitor)).
% 1     exists x (Crewmember(x) & (x=Blue | x=Red | x=Yellow | x=Purple | x= Janitor)).
%        exists x, exists y, exists z, exists m, exists n (Crewmember(x) & Crewmember(y) & Crewmember(z) & Crewmember(m) & Crewmember(n) & x=Blue & y=Red & z=Yellow & x=Purple  & x= Janitor ).
%     Crewmember(Blue) & Crewmember(Red) & Crewmember(Yellow) & Crewmember(Purple) & Crewmember(Janitor).
       all x (Crewmember(x) <-> Blue=x | Red=x | Yellow=x | Purple=x | Janitor=x).

%% A2: "There are two crewmembers who are impostors."
% 2
        exists x exists y (Crewmember(x) & Crewmember(y) & -(x=y) & Impostor(x) & Impostor(y)).

%% A3: "There are no more than two impostors."
% 2
        -(exists x exists y exists z ( Impostor(x) & Impostor(y) & Impostor(z) & -(x=y) & -(y=z) & -(x=z) ) ).

%% A4: "If somebody accuses someone then the accused is an impostor or the accuser is the impostor."
% 2
        all x all y (Accused(x, y) -> Impostor(x) | Impostor(y)).

%% A5: "If somebody is known to be an impostor, then they are an impostor."
% ===> 1
%        all x all y (KnowsImpostor(x, y) -> Impostor(x) & Impostor(y)).
% 0        exists x exists y (KnowsImpostor(x, y) & Impostor(x) & Impostor(y) & -(x=y)).
% 2
         all x all y (KnowsImpostor(x, y) -> Impostor(y)).

%% A6: "Impostors know they are impostors."
% 2
        all x (Impostor(x) -> KnowsImpostor(x, x)).

%% A7: "If someone is murdered then they are not an impostor."
% 2
        all x (Murdered(x) -> -Impostor(x) ).

%% A8: "Purple knows one of the impostors."
% ===> 0
%        Crewmember(Purple) -> exists x (Impostor(x)).
% 0         Purple  -> exists x (Impostor(x)).
% 0     Crewmember(Purple) & exists x (Impostor(x)).
% 0
% 1         all x (KnowsImpostor(Purple,x)).
%          exists x (KnowsImpostor(Purple,x)) & -(exists y (KnowsImpostor(Purple, y) & -(x=y))).
        exists x (KnowsImpostor(Purple,x)).

%% A9: "Purple doesn't know that the Janitor or Blue are an impostor."
% ===> 0
% 0        Crewmember(Purple) -> (Crewmember(Janitor) & Impostor(Janitor)) | (Crewmember(Blue) & Impostor(Blue)).
% 0         Purple -> Impostor(Janitor) | Impostor(Blue). 
% 1      -KnowsImpostor(Purple, Janitor) | -KnowsImpostor(Purple, Blue).

        -KnowsImpostor(Purple, Janitor) & -KnowsImpostor(Purple, Blue).

%% A10: "Purple was found murdered."
% 2
        Murdered(Purple).

%% A11: "Neither Red or Blue are the Janitor."
% 2
        -(Red = Janitor) & -(Blue = Janitor).

%% A12: "Blue accused Yellow."
% 2
        Accused(Blue, Yellow).

%% A13: "Nobody knows that Yellow is an impostor."
% ===> 0
% 0     all x ( Crewmember(x) -> KnowsImpostor(x, Yellow)).
% 2
        -(exists x (KnowsImpostor(x, Yellow))).

end_of_list.

formulas(goals).

%% GOAL: "Yellow, Purple and the Janitor are not impostors and Blue and Red are impostors."
% ===> 0
% 0          -Impostor(Yellow) & -Impostor(Purple) & Impostor(Janitor) & Impostor(Blue) & Impostor(Red).
% 2
          -Impostor(Yellow) & -Impostor(Purple) & -Impostor(Janitor) & Impostor(Blue) & Impostor(Red).

end_of_list.


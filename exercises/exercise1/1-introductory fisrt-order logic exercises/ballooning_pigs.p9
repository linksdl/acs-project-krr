% Saved by Prover9-Mace4 Version 0.5B, March 2008 (Dec 2007 LADR).

set(ignore_option_dependencies). % GUI handles dependencies

if(Prover9). % Options for Prover9
  clear(auto).
  clear(auto_setup).
  clear(auto_limits).
  clear(auto_denials).
  clear(auto_inference).
  clear(auto_process).
  assign(eq_defs, pass).
  assign(max_seconds, 10).
  assign(max_weight, 2147483647).
  clear(predicate_elim).
  set(binary_resolution).
  set(paramodulation).
  set(factor).
end_if.

if(Mace4).   % Options for Mace4
  assign(max_seconds, 60).
end_if.

if(Prover9). % Additional input for Prover9
assign(sos_limit, -1).
% Last line is a lie. It is there to stop the Prover9-Mace4
% GUI giving a warning when the file is loaded.
% This file was actually reated by BB Prover9 Autograder
end_if.

formulas(assumptions).

%% Balloonig Pigs
%% This exercise is based on a problem set by Lewis Carroll
%% (Author of Alice in Wonderland) in his book Symbolic Logic.
%%
%% Prover9 file: ballooning_pigs.p9

%% To solve this first-order logic proof problem, you must replace
%% each of the assumption place-holders __An__ and the goal place-holder
%% __G__, with an approapriate first-order formula that captures the
%% meaning of the given English sentence.
%% 
%% Then run Prover9. 
%% If your representations are correct, it should find a Proof.
%% You can also check your representations using the Gradescope Autograder.

%% In writing the formulae, you should only use the following vocabulary:
%%
%% Logical symbols:           &  |  -  ->   <->  =  all  exists
%% Brackets and separators:   ( )  [  ]  ,  .
%% Variables:                 Whatever you like, but must be quantified.
%%
%% Predicates: Dance_on_Tightropes, Eat_Penny_Buns, Old, Pig, Giddy, Respected, Wise, Balloonist,
%% Takes_Umbrella, Ridiculous, Lunch_in_Public, Young, Fat, Old
%%
%% Use only the specified vocabulary, otherwise the autograder will not work.

%% A1: "All, who neither dance on tightropes nor eat penny-buns, are old."

        all x (-Dance_on_Tightropes(x) & -Eat_Penny_Buns(x) -> Old(x)).

%% A2: "Pigs, that are liable to giddiness, are treated with respect."

        all x (Pig(x) & Giddy(x) -> Respected(x)).

%% A3: "A wise balloonist takes an umbrella with him."

        all x (Wise(x) & Balloonist(x) -> Takes_Umbrella(x)).

%% A4: "No one ought to lunch in public who looks ridiculous and eats penny-buns."

       -(exists x (Lunch_in_Public(x) & Ridiculous(x) & Eat_Penny_Buns(x))) .
         %all x (Lunch_in_Public(x) <-> Ridiculous(x) & Eat_Penny_Buns(x) ).

%% A5: "Young creatures, who go up in balloons, are liable to giddiness."

        all x (Young(x) & Balloonist(x) -> Giddy(x)).

%% A6: "Fat creatures, who look ridiculous, may lunch in public, provided that they do not dance on tightropes."
%%
%%        all x (Fat(x) & Ridiculous(x) -> Lunch_in_Public(x) & -Dance_on_Tightropes(x)).
      all x (-Dance_on_Tightropes(x) & Fat(x) & Ridiculous(x) -> Lunch_in_Public(x)).

%% A7: "No wise creatures dance on tightropes, if liable to giddiness."

        -(exists x (Wise(x) & Dance_on_Tightropes(x) & Giddy(x))).

%% A8: "A pig looks ridiculous, carrying an umbrella."
%%
%%        all x (Pig(x) & Ridiculous(x) <-> Takes_Umbrella(x)).
%%        all x (Pig(x) & Ridiculous(x) -> Takes_Umbrella(x)).
%%       exists x (Pig(x) & Ridiculous(x) & Takes_Umbrella(x)) & -(exists y (Pig(y) & Ridiculous(y) & Takes_Umbrella(y) & -(x=y))).
         all x(Pig(x) & Takes_Umbrella(x) -> Ridiculous(x)).

%% A9: "All, who do not dance on tightropes, and who are treated with respect are fat."

        all x(-Dance_on_Tightropes(x) & Respected(x) -> Fat(x)).

%% A10: "No one is young and old at the same time."

        -(exists x (Young(x) & Old(x))).

end_of_list.

formulas(goals).

%% GOAL: "No wise young pigs go up in balloons."

    -(exists x (Wise(x) & Young(x) & Pig(x) & Balloonist(x) )).

end_of_list.

